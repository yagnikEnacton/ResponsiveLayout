name: Build your apk

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Lint the codebase
      - name: Lint
        run: npx eslint && npx  @react-native-community/cli@latest  link

      # # Step 5: Cache Gradle Wrapper to speed up builds
      # - name: Cache Gradle Wrapper
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}

      # # Step 6: Cache Gradle Dependencies to speed up builds
      # - name: Cache Gradle Dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.gradle/caches
      #     key: ${{ runner.os }}-gradle-caches-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-caches-
            
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew
      # # Step 7: Clean Gradle build to avoid issues with previous builds
      # - name: Clean Gradle build
      #   run: cd android && ./gradlew clean

      # # Step 8: Check if the `autolinking.json` file exists
      # - name: Check autolinking.json file
      #   run: ls -l android/build/generated/autolinking/

      # Step 9: Make gradlew executable
      

      # Step 10: Build Debug APK
      - name: Build Android Debug APK
        run: cd android && ./gradlew assembleDebug
